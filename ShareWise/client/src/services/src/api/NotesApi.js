/**
 * Openapi specification - Darshan
 * OpenApi documentation for Spring security
 *
 * The version of the OpenAPI document: 1.0
 * Contact: walnut2918@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NotesRequest from '../model/NotesRequest';
import NotesResponse from '../model/NotesResponse';
import PageResponseBorrowedNotesResponse from '../model/PageResponseBorrowedNotesResponse';
import PageResponseNotesResponse from '../model/PageResponseNotesResponse';

/**
* Notes service.
* @module api/NotesApi
* @version 1.0
*/
export default class NotesApi {

    /**
    * Constructs a new NotesApi. 
    * @alias module:api/NotesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the approvereturnBorrowNotes operation.
     * @callback module:api/NotesApi~approvereturnBorrowNotesCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} notesId 
     * @param {module:api/NotesApi~approvereturnBorrowNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    approvereturnBorrowNotes(notesId, callback) {
      let postBody = null;
      // verify the required parameter 'notesId' is set
      if (notesId === undefined || notesId === null) {
        throw new Error("Missing the required parameter 'notesId' when calling approvereturnBorrowNotes");
      }

      let pathParams = {
        'notes-id': notesId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/notes/borrow/return/approve/{notes-id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the borrowNotes operation.
     * @callback module:api/NotesApi~borrowNotesCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} notesId 
     * @param {module:api/NotesApi~borrowNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    borrowNotes(notesId, callback) {
      let postBody = null;
      // verify the required parameter 'notesId' is set
      if (notesId === undefined || notesId === null) {
        throw new Error("Missing the required parameter 'notesId' when calling borrowNotes");
      }

      let pathParams = {
        'notes-id': notesId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/notes/borrowed/{notes-id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllBorrowedNotes operation.
     * @callback module:api/NotesApi~findAllBorrowedNotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseBorrowedNotesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [size = 10)] 
     * @param {module:api/NotesApi~findAllBorrowedNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseBorrowedNotesResponse}
     */
    findAllBorrowedNotes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResponseBorrowedNotesResponse;
      return this.apiClient.callApi(
        '/notes/borrowed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllNotes operation.
     * @callback module:api/NotesApi~findAllNotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseNotesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [size = 10)] 
     * @param {module:api/NotesApi~findAllNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseNotesResponse}
     */
    findAllNotes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResponseNotesResponse;
      return this.apiClient.callApi(
        '/notes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllNotesByOwner operation.
     * @callback module:api/NotesApi~findAllNotesByOwnerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseNotesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [size = 10)] 
     * @param {module:api/NotesApi~findAllNotesByOwnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseNotesResponse}
     */
    findAllNotesByOwner(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResponseNotesResponse;
      return this.apiClient.callApi(
        '/notes/owner', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllReturnedNotes operation.
     * @callback module:api/NotesApi~findAllReturnedNotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseBorrowedNotesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [size = 10)] 
     * @param {module:api/NotesApi~findAllReturnedNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseBorrowedNotesResponse}
     */
    findAllReturnedNotes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResponseBorrowedNotesResponse;
      return this.apiClient.callApi(
        '/notes/returned', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findNotesById operation.
     * @callback module:api/NotesApi~findNotesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} bookId 
     * @param {module:api/NotesApi~findNotesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotesResponse}
     */
    findNotesById(bookId, callback) {
      let postBody = null;
      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling findNotesById");
      }

      let pathParams = {
        'book-id': bookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NotesResponse;
      return this.apiClient.callApi(
        '/notes/{book-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the returnBorrowNotes operation.
     * @callback module:api/NotesApi~returnBorrowNotesCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} notesId 
     * @param {module:api/NotesApi~returnBorrowNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    returnBorrowNotes(notesId, callback) {
      let postBody = null;
      // verify the required parameter 'notesId' is set
      if (notesId === undefined || notesId === null) {
        throw new Error("Missing the required parameter 'notesId' when calling returnBorrowNotes");
      }

      let pathParams = {
        'notes-id': notesId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/notes/borrow/return/{notes-id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveNote operation.
     * @callback module:api/NotesApi~saveNoteCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/NotesRequest} notesRequest 
     * @param {module:api/NotesApi~saveNoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    saveNote(notesRequest, callback) {
      let postBody = notesRequest;
      // verify the required parameter 'notesRequest' is set
      if (notesRequest === undefined || notesRequest === null) {
        throw new Error("Missing the required parameter 'notesRequest' when calling saveNote");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/notes/path', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateArchivedStatus operation.
     * @callback module:api/NotesApi~updateArchivedStatusCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} notesId 
     * @param {module:api/NotesApi~updateArchivedStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    updateArchivedStatus(notesId, callback) {
      let postBody = null;
      // verify the required parameter 'notesId' is set
      if (notesId === undefined || notesId === null) {
        throw new Error("Missing the required parameter 'notesId' when calling updateArchivedStatus");
      }

      let pathParams = {
        'notes-id': notesId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/notes/archived/{notes-id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateShareableStatus operation.
     * @callback module:api/NotesApi~updateShareableStatusCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} notesId 
     * @param {module:api/NotesApi~updateShareableStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    updateShareableStatus(notesId, callback) {
      let postBody = null;
      // verify the required parameter 'notesId' is set
      if (notesId === undefined || notesId === null) {
        throw new Error("Missing the required parameter 'notesId' when calling updateShareableStatus");
      }

      let pathParams = {
        'notes-id': notesId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/notes/shareable/{notes-id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadNotesCoverPage operation.
     * @callback module:api/NotesApi~uploadNotesCoverPageCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} notesId 
     * @param {File} file 
     * @param {module:api/NotesApi~uploadNotesCoverPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    uploadNotesCoverPage(notesId, file, callback) {
      let postBody = null;
      // verify the required parameter 'notesId' is set
      if (notesId === undefined || notesId === null) {
        throw new Error("Missing the required parameter 'notesId' when calling uploadNotesCoverPage");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadNotesCoverPage");
      }

      let pathParams = {
        'notes-id': notesId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/notes/cover/{notes-id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
