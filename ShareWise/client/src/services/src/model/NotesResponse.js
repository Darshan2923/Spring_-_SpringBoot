/**
 * Openapi specification - Darshan
 * OpenApi documentation for Spring security
 *
 * The version of the OpenAPI document: 1.0
 * Contact: walnut2918@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NotesResponse model module.
 * @module model/NotesResponse
 * @version 1.0
 */
class NotesResponse {
    /**
     * Constructs a new <code>NotesResponse</code>.
     * @alias module:model/NotesResponse
     */
    constructor() { 
        
        NotesResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NotesResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotesResponse} obj Optional instance to populate.
     * @return {module:model/NotesResponse} The populated <code>NotesResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotesResponse();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('authorName')) {
                obj['authorName'] = ApiClient.convertToType(data['authorName'], 'String');
            }
            if (data.hasOwnProperty('synopsis')) {
                obj['synopsis'] = ApiClient.convertToType(data['synopsis'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('notes_content')) {
                obj['notes_content'] = ApiClient.convertToType(data['notes_content'], 'Blob');
            }
            if (data.hasOwnProperty('rate')) {
                obj['rate'] = ApiClient.convertToType(data['rate'], 'Number');
            }
            if (data.hasOwnProperty('archived')) {
                obj['archived'] = ApiClient.convertToType(data['archived'], 'Boolean');
            }
            if (data.hasOwnProperty('shareable')) {
                obj['shareable'] = ApiClient.convertToType(data['shareable'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotesResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotesResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['authorName'] && !(typeof data['authorName'] === 'string' || data['authorName'] instanceof String)) {
            throw new Error("Expected the field `authorName` to be a primitive type in the JSON string but got " + data['authorName']);
        }
        // ensure the json data is a string
        if (data['synopsis'] && !(typeof data['synopsis'] === 'string' || data['synopsis'] instanceof String)) {
            throw new Error("Expected the field `synopsis` to be a primitive type in the JSON string but got " + data['synopsis']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
NotesResponse.prototype['id'] = undefined;

/**
 * @member {String} title
 */
NotesResponse.prototype['title'] = undefined;

/**
 * @member {String} authorName
 */
NotesResponse.prototype['authorName'] = undefined;

/**
 * @member {String} synopsis
 */
NotesResponse.prototype['synopsis'] = undefined;

/**
 * @member {String} owner
 */
NotesResponse.prototype['owner'] = undefined;

/**
 * @member {Blob} notes_content
 */
NotesResponse.prototype['notes_content'] = undefined;

/**
 * @member {Number} rate
 */
NotesResponse.prototype['rate'] = undefined;

/**
 * @member {Boolean} archived
 */
NotesResponse.prototype['archived'] = undefined;

/**
 * @member {Boolean} shareable
 */
NotesResponse.prototype['shareable'] = undefined;






export default NotesResponse;

